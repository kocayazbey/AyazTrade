name: Continuous Deployment

on:
  push:
    branches: [ main ]
  workflow_dispatch:
    inputs:
      environment:
        description: 'Environment to deploy to'
        required: true
        default: 'staging'
        type: choice
        options:
          - staging
          - production

env:
  NODE_VERSION: '18'
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

jobs:
  # Build and push Docker images
  build-and-push:
    name: Build and Push Docker Images
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write
    outputs:
      image-tag: ${{ steps.meta.outputs.tags }}
      image-digest: ${{ steps.build.outputs.digest }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Extract metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: |
            ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}-backend
            ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}-admin
            ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}-storefront
            ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}-b2b
          tags: |
            type=ref,event=branch
            type=ref,event=pr
            type=sha,prefix={{branch}}-
            type=raw,value=latest,enable={{is_default_branch}}

      - name: Build and push backend image
        id: build-backend
        uses: docker/build-push-action@v5
        with:
          context: .
          file: ./Dockerfile
          target: backend
          push: true
          tags: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}-backend:${{ github.sha }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

      - name: Build and push admin panel image
        id: build-admin
        uses: docker/build-push-action@v5
        with:
          context: ./frontend/admin
          file: ./frontend/admin/Dockerfile
          push: true
          tags: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}-admin:${{ github.sha }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

      - name: Build and push storefront image
        id: build-storefront
        uses: docker/build-push-action@v5
        with:
          context: ./frontend/storefront
          file: ./frontend/storefront/Dockerfile
          push: true
          tags: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}-storefront:${{ github.sha }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

      - name: Build and push B2B portal image
        id: build-b2b
        uses: docker/build-push-action@v5
        with:
          context: ./frontend/b2b-portal
          file: ./frontend/b2b-portal/Dockerfile
          push: true
          tags: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}-b2b:${{ github.sha }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

  # Deploy to staging
  deploy-staging:
    name: Deploy to Staging
    runs-on: ubuntu-latest
    needs: build-and-push
    if: github.ref == 'refs/heads/main' || github.event.inputs.environment == 'staging'
    environment: staging
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: us-east-1

      - name: Deploy to ECS
        run: |
          # Update ECS service with new image
          aws ecs update-service \
            --cluster ayaztrade-staging \
            --service ayaztrade-backend-staging \
            --force-new-deployment

      - name: Run database migrations
        run: |
          # Run database migrations for staging
          aws ecs run-task \
            --cluster ayaztrade-staging \
            --task-definition ayaztrade-migration-staging \
            --launch-type FARGATE \
            --network-configuration "awsvpcConfiguration={subnets=[subnet-12345],securityGroups=[sg-12345],assignPublicIp=ENABLED}"

      - name: Run smoke tests
        run: |
          # Run smoke tests against staging environment
          npm run test:smoke -- --env=staging

      - name: Notify deployment
        uses: 8398a7/action-slack@v3
        with:
          status: ${{ job.status }}
          channel: '#deployments'
          webhook_url: ${{ secrets.SLACK_WEBHOOK }}

  # Deploy to production
  deploy-production:
    name: Deploy to Production
    runs-on: ubuntu-latest
    needs: [build-and-push, deploy-staging]
    if: github.ref == 'refs/heads/main' && github.event.inputs.environment == 'production'
    environment: production
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: us-east-1

      - name: Deploy to ECS
        run: |
          # Update ECS service with new image
          aws ecs update-service \
            --cluster ayaztrade-production \
            --service ayaztrade-backend-production \
            --force-new-deployment

      - name: Run database migrations
        run: |
          # Run database migrations for production
          aws ecs run-task \
            --cluster ayaztrade-production \
            --task-definition ayaztrade-migration-production \
            --launch-type FARGATE \
            --network-configuration "awsvpcConfiguration={subnets=[subnet-12345],securityGroups=[sg-12345],assignPublicIp=ENABLED}"

      - name: Run smoke tests
        run: |
          # Run smoke tests against production environment
          npm run test:smoke -- --env=production

      - name: Notify deployment
        uses: 8398a7/action-slack@v3
        with:
          status: ${{ job.status }}
          channel: '#deployments'
          webhook_url: ${{ secrets.SLACK_WEBHOOK }}

  # Kubernetes deployment
  deploy-k8s:
    name: Deploy to Kubernetes
    runs-on: ubuntu-latest
    needs: build-and-push
    if: github.ref == 'refs/heads/main'
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up kubectl
        uses: azure/setup-kubectl@v3
        with:
          version: 'v1.28.0'

      - name: Configure kubectl
        run: |
          echo "${{ secrets.KUBE_CONFIG }}" | base64 -d > kubeconfig
          export KUBECONFIG=kubeconfig

      - name: Deploy to Kubernetes
        run: |
          export KUBECONFIG=kubeconfig
          
          # Update image tags in deployment files
          sed -i "s|IMAGE_TAG|${{ github.sha }}|g" k8s/deployment.yaml
          
          # Apply deployments
          kubectl apply -f k8s/deployment.yaml
          kubectl apply -f k8s/service.yaml
          kubectl apply -f k8s/ingress.yaml
          
          # Wait for rollout
          kubectl rollout status deployment/ayaztrade-backend
          kubectl rollout status deployment/ayaztrade-admin
          kubectl rollout status deployment/ayaztrade-storefront
          kubectl rollout status deployment/ayaztrade-b2b

      - name: Run health checks
        run: |
          export KUBECONFIG=kubeconfig
          
          # Check if all pods are running
          kubectl get pods -l app=ayaztrade-backend
          kubectl get pods -l app=ayaztrade-admin
          kubectl get pods -l app=ayaztrade-storefront
          kubectl get pods -l app=ayaztrade-b2b

  # Database backup before deployment
  backup-database:
    name: Backup Database
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: us-east-1

      - name: Create database backup
        run: |
          # Create RDS snapshot
          aws rds create-db-snapshot \
            --db-instance-identifier ayaztrade-production \
            --db-snapshot-identifier ayaztrade-backup-$(date +%Y%m%d-%H%M%S)

      - name: Upload backup to S3
        run: |
          # Upload backup to S3 for long-term storage
          aws s3 cp backup.sql s3://ayaztrade-backups/$(date +%Y%m%d)/backup-$(date +%Y%m%d-%H%M%S).sql

  # Rollback deployment
  rollback:
    name: Rollback Deployment
    runs-on: ubuntu-latest
    if: failure()
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: us-east-1

      - name: Rollback ECS service
        run: |
          # Rollback to previous version
          aws ecs update-service \
            --cluster ayaztrade-production \
            --service ayaztrade-backend-production \
            --force-new-deployment

      - name: Notify rollback
        uses: 8398a7/action-slack@v3
        with:
          status: ${{ job.status }}
          channel: '#deployments'
          webhook_url: ${{ secrets.SLACK_WEBHOOK }}

  # Cleanup old images
  cleanup:
    name: Cleanup Old Images
    runs-on: ubuntu-latest
    if: always()
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Delete old images
        run: |
          # Delete images older than 30 days
          aws ecr list-images \
            --repository-name ayaztrade-backend \
            --filter tagStatus=TAGGED \
            --query 'imageIds[?imagePushedAt<`'$(date -d '30 days ago' --iso-8601)`']' \
            --output json | jq -r '.[].imageDigest' | xargs -I {} aws ecr batch-delete-image \
            --repository-name ayaztrade-backend \
            --image-ids imageDigest={}
