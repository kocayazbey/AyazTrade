name: Release

on:
  push:
    tags:
      - 'v*'
  workflow_dispatch:
    inputs:
      version:
        description: 'Version to release'
        required: true
        default: '1.0.0'
      release-type:
        description: 'Type of release'
        required: true
        default: 'patch'
        type: choice
        options:
          - patch
          - minor
          - major
          - prerelease

env:
  NODE_VERSION: '18'
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

jobs:
  # Create release
  create-release:
    name: Create Release
    runs-on: ubuntu-latest
    outputs:
      release-id: ${{ steps.create-release.outputs.id }}
      upload-url: ${{ steps.create-release.outputs.upload_url }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Get version
        id: version
        run: |
          if [ "${{ github.event_name }}" = "workflow_dispatch" ]; then
            echo "VERSION=${{ github.event.inputs.version }}" >> $GITHUB_OUTPUT
          else
            echo "VERSION=${GITHUB_REF#refs/tags/}" >> $GITHUB_OUTPUT
          fi

      - name: Generate changelog
        id: changelog
        run: |
          # Generate changelog from git commits
          git log --oneline --pretty=format:"- %s" $(git describe --tags --abbrev=0 HEAD^)..HEAD > CHANGELOG.md
          echo "CHANGELOG<<EOF" >> $GITHUB_OUTPUT
          cat CHANGELOG.md >> $GITHUB_OUTPUT
          echo "EOF" >> $GITHUB_OUTPUT

      - name: Create release
        id: create-release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ steps.version.outputs.VERSION }}
          release_name: Release ${{ steps.version.outputs.VERSION }}
          body: |
            ## What's Changed
            ${{ steps.changelog.outputs.CHANGELOG }}
            
            ## Installation
            ```bash
            npm install @ayaztrade/sdk@${{ steps.version.outputs.VERSION }}
            ```
            
            ## Docker Images
            - Backend: `ghcr.io/${{ env.IMAGE_NAME }}-backend:${{ steps.version.outputs.VERSION }}`
            - Admin Panel: `ghcr.io/${{ env.IMAGE_NAME }}-admin:${{ steps.version.outputs.VERSION }}`
            - Storefront: `ghcr.io/${{ env.IMAGE_NAME }}-storefront:${{ steps.version.outputs.VERSION }}`
            - B2B Portal: `ghcr.io/${{ env.IMAGE_NAME }}-b2b:${{ steps.version.outputs.VERSION }}`
            
            ## Documentation
            - [API Documentation](https://docs.ayaztrade.com/api)
            - [Deployment Guide](https://docs.ayaztrade.com/deployment)
            - [Developer Guide](https://docs.ayaztrade.com/developer)
          draft: false
          prerelease: ${{ github.event.inputs.release-type == 'prerelease' }}

  # Build and push Docker images
  build-images:
    name: Build and Push Docker Images
    runs-on: ubuntu-latest
    needs: create-release
    permissions:
      contents: read
      packages: write
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Extract metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: |
            ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}-backend
            ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}-admin
            ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}-storefront
            ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}-b2b
          tags: |
            type=ref,event=tag
            type=semver,pattern={{version}}
            type=semver,pattern={{major}}.{{minor}}
            type=semver,pattern={{major}}
            type=raw,value=latest,enable={{is_default_branch}}

      - name: Build and push backend image
        uses: docker/build-push-action@v5
        with:
          context: .
          file: ./Dockerfile
          target: backend
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

      - name: Build and push admin panel image
        uses: docker/build-push-action@v5
        with:
          context: ./frontend/admin
          file: ./frontend/admin/Dockerfile
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

      - name: Build and push storefront image
        uses: docker/build-push-action@v5
        with:
          context: ./frontend/storefront
          file: ./frontend/storefront/Dockerfile
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

      - name: Build and push B2B portal image
        uses: docker/build-push-action@v5
        with:
          context: ./frontend/b2b-portal
          file: ./frontend/b2b-portal/Dockerfile
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

  # Build and publish NPM packages
  publish-npm:
    name: Publish NPM Packages
    runs-on: ubuntu-latest
    needs: create-release
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          registry-url: 'https://registry.npmjs.org'

      - name: Install dependencies
        run: npm ci

      - name: Build packages
        run: npm run build

      - name: Publish to NPM
        run: npm publish
        env:
          NODE_AUTH_TOKEN: ${{ secrets.NPM_TOKEN }}

  # Build and publish SDK packages
  publish-sdk:
    name: Publish SDK Packages
    runs-on: ubuntu-latest
    needs: create-release
    strategy:
      matrix:
        sdk: [javascript, python, php, java]
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Build SDK
        run: |
          cd sdk/${{ matrix.sdk }}
          npm ci
          npm run build

      - name: Publish JavaScript SDK
        if: matrix.sdk == 'javascript'
        run: |
          cd sdk/javascript
          npm publish
        env:
          NODE_AUTH_TOKEN: ${{ secrets.NPM_TOKEN }}

      - name: Publish Python SDK
        if: matrix.sdk == 'python'
        run: |
          cd sdk/python
          pip install build twine
          python -m build
          twine upload dist/*
        env:
          TWINE_USERNAME: __token__
          TWINE_PASSWORD: ${{ secrets.PYPI_TOKEN }}

      - name: Publish PHP SDK
        if: matrix.sdk == 'php'
        run: |
          cd sdk/php
          composer install
          composer publish
        env:
          PACKAGIST_TOKEN: ${{ secrets.PACKAGIST_TOKEN }}

      - name: Publish Java SDK
        if: matrix.sdk == 'java'
        run: |
          cd sdk/java
          ./gradlew publish
        env:
          SONATYPE_USERNAME: ${{ secrets.SONATYPE_USERNAME }}
          SONATYPE_PASSWORD: ${{ secrets.SONATYPE_PASSWORD }}

  # Deploy to staging
  deploy-staging:
    name: Deploy to Staging
    runs-on: ubuntu-latest
    needs: [create-release, build-images]
    environment: staging
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: us-east-1

      - name: Deploy to ECS
        run: |
          # Update ECS service with new image
          aws ecs update-service \
            --cluster ayaztrade-staging \
            --service ayaztrade-backend-staging \
            --force-new-deployment

      - name: Run database migrations
        run: |
          # Run database migrations for staging
          aws ecs run-task \
            --cluster ayaztrade-staging \
            --task-definition ayaztrade-migration-staging \
            --launch-type FARGATE \
            --network-configuration "awsvpcConfiguration={subnets=[subnet-12345],securityGroups=[sg-12345],assignPublicIp=ENABLED}"

      - name: Run smoke tests
        run: |
          # Run smoke tests against staging environment
          npm run test:smoke -- --env=staging

      - name: Notify deployment
        uses: 8398a7/action-slack@v3
        with:
          status: ${{ job.status }}
          channel: '#deployments'
          webhook_url: ${{ secrets.SLACK_WEBHOOK }}

  # Deploy to production
  deploy-production:
    name: Deploy to Production
    runs-on: ubuntu-latest
    needs: [create-release, build-images, deploy-staging]
    environment: production
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: us-east-1

      - name: Deploy to ECS
        run: |
          # Update ECS service with new image
          aws ecs update-service \
            --cluster ayaztrade-production \
            --service ayaztrade-backend-production \
            --force-new-deployment

      - name: Run database migrations
        run: |
          # Run database migrations for production
          aws ecs run-task \
            --cluster ayaztrade-production \
            --task-definition ayaztrade-migration-production \
            --launch-type FARGATE \
            --network-configuration "awsvpcConfiguration={subnets=[subnet-12345],securityGroups=[sg-12345],assignPublicIp=ENABLED}"

      - name: Run smoke tests
        run: |
          # Run smoke tests against production environment
          npm run test:smoke -- --env=production

      - name: Notify deployment
        uses: 8398a7/action-slack@v3
        with:
          status: ${{ job.status }}
          channel: '#deployments'
          webhook_url: ${{ secrets.SLACK_WEBHOOK }}

  # Update documentation
  update-docs:
    name: Update Documentation
    runs-on: ubuntu-latest
    needs: create-release
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Generate API documentation
        run: npm run docs:generate

      - name: Deploy documentation
        uses: peaceiris/actions-gh-pages@v3
        with:
          github_token: ${{ secrets.GITHUB_TOKEN }}
          publish_dir: ./docs
          destination_dir: .

      - name: Notify documentation update
        uses: 8398a7/action-slack@v3
        with:
          status: ${{ job.status }}
          channel: '#documentation'
          webhook_url: ${{ secrets.SLACK_WEBHOOK }}

  # Create GitHub release
  github-release:
    name: Create GitHub Release
    runs-on: ubuntu-latest
    needs: [create-release, build-images, publish-npm, publish-sdk, deploy-staging, deploy-production, update-docs]
    if: always()
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Download release assets
        uses: actions/download-artifact@v4
        with:
          path: release-assets

      - name: Upload release assets
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ needs.create-release.outputs.upload_url }}
          asset_path: release-assets/
          asset_name: release-assets
          asset_content_type: application/zip

      - name: Notify release
        uses: 8398a7/action-slack@v3
        with:
          status: ${{ job.status }}
          channel: '#releases'
          webhook_url: ${{ secrets.SLACK_WEBHOOK }}

  # Cleanup
  cleanup:
    name: Cleanup
    runs-on: ubuntu-latest
    needs: [create-release, build-images, publish-npm, publish-sdk, deploy-staging, deploy-production, update-docs, github-release]
    if: always()
    steps:
      - name: Cleanup old releases
        run: |
          # Cleanup old releases (keep last 10)
          gh release list --limit 100 --json tagName --jq '.[10:].tagName' | xargs -I {} gh release delete {} --yes
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Cleanup old images
        run: |
          # Delete images older than 30 days
          aws ecr list-images \
            --repository-name ayaztrade-backend \
            --filter tagStatus=TAGGED \
            --query 'imageIds[?imagePushedAt<`'$(date -d '30 days ago' --iso-8601)`']' \
            --output json | jq -r '.[].imageDigest' | xargs -I {} aws ecr batch-delete-image \
            --repository-name ayaztrade-backend \
            --image-ids imageDigest={}
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
